1
00:00:00,130 --> 00:00:02,920
Welcome back to the discussion
of spatial networks.

2
00:00:02,920 --> 00:00:05,770
And so far we've looked at
the societal use cases and

3
00:00:05,770 --> 00:00:08,200
motivation for
learning about spatial networks.

4
00:00:08,200 --> 00:00:12,930
You know, for example all of us use
navigation apps on smartphone or

5
00:00:12,930 --> 00:00:14,480
on web based services like Google Maps.

6
00:00:15,720 --> 00:00:19,510
We also looked at conceptual
models of spatial network.

7
00:00:19,510 --> 00:00:22,350
We looked at en,
an entity relationship diagram.

8
00:00:22,350 --> 00:00:25,630
But also graph models,
which have very nice mathematical and

9
00:00:25,630 --> 00:00:27,540
computational properties.

10
00:00:27,540 --> 00:00:28,360
So in this video,

11
00:00:28,360 --> 00:00:33,580
we are going to start discussion of the
logical data model for spatial networks.

12
00:00:33,580 --> 00:00:37,890
So at the end of this video,
we should be able to describe the need for

13
00:00:37,890 --> 00:00:42,878
extensions to the SQL spatial querying
language we have learned so far.

14
00:00:42,878 --> 00:00:51,220
And also specify specific details such as
the recursive querying facility in SQL.

15
00:00:51,220 --> 00:00:53,680
So there is different ways to extend and
we can list them.

16
00:00:55,692 --> 00:00:58,800
All right so
clicks again recall the context,

17
00:00:58,800 --> 00:01:03,410
you know we have discussed conceptual data
model and this case we are in a video.

18
00:01:03,410 --> 00:01:07,820
We are going to look at logical data
model and we look at two different ways

19
00:01:07,820 --> 00:01:13,600
to extend SQL to support queries on
spatial networks such as shortest path.

20
00:01:13,600 --> 00:01:17,020
And in subsequent videos we will see
the details of those two ways and

21
00:01:17,020 --> 00:01:19,690
then we'll come back and
look at physical data model,

22
00:01:19,690 --> 00:01:24,500
how to perform these queries very,
very efficiently on large networks.

23
00:01:24,500 --> 00:01:29,931
Okay, so first let's look at a basic
notion called Transitive Closure.

24
00:01:29,931 --> 00:01:34,328
Because this is one way to formally
describe the limitations of traditional

25
00:01:34,328 --> 00:01:39,890
query languages, including the spatial
querying we have learned so far, okay?

26
00:01:39,890 --> 00:01:45,650
So consider a graph G which has a set
a vertices V and a set of edges E.

27
00:01:45,650 --> 00:01:51,610
Then Transitive Closure of this graph
is described as another graph G star.

28
00:01:51,610 --> 00:01:56,570
And it has a set of vertices V star,
another set of edges E star, okay.

29
00:01:57,570 --> 00:02:02,460
And formally, the set of vertices is same
as the set of vertices in original graph.

30
00:02:02,460 --> 00:02:04,630
So V and V star are the same.

31
00:02:04,630 --> 00:02:07,270
But the set of edges is much richer.

32
00:02:07,270 --> 00:02:13,270
So not only we have the original edges,
but we also add all the paths.

33
00:02:13,270 --> 00:02:16,970
To illustrate this,
let's look at a very simple graph.

34
00:02:16,970 --> 00:02:21,640
So here we have a graph with about five
nodes, one, two, three, four, five.

35
00:02:21,640 --> 00:02:24,180
And you also see five edges, okay.

36
00:02:24,180 --> 00:02:26,980
So this is your basic graph G.

37
00:02:26,980 --> 00:02:31,630
Now if we were to look at its Transitive
Closure it will have same set of nodes, so

38
00:02:31,630 --> 00:02:34,200
five nodes, but many more edges.

39
00:02:34,200 --> 00:02:37,340
Which will represent all possible parts,
okay?

40
00:02:37,340 --> 00:02:41,000
So here if you look at G star,
so five nodes and nine edges.

41
00:02:41,000 --> 00:02:43,230
And here is the picture of that, okay?

42
00:02:43,230 --> 00:02:47,380
So you see the same five nodes show up
here but the set of edges is richer.

43
00:02:47,380 --> 00:02:49,340
Okay?
So where did they come from?

44
00:02:49,340 --> 00:02:53,090
They are essentially listing the,
all possible paths.

45
00:02:53,090 --> 00:02:55,930
So, for example,
notice in the original graph,

46
00:02:55,930 --> 00:03:01,630
we could go from node one to node four,
but there was no direct edge.

47
00:03:01,630 --> 00:03:04,900
In order to reach there, you either
had to go through five, three, and

48
00:03:04,900 --> 00:03:07,960
four, or via two, three, and four, okay.

49
00:03:07,960 --> 00:03:10,380
But nonetheless,
there is a path from one to four.

50
00:03:10,380 --> 00:03:13,530
So in the Transitive Closure you
see an edge from one to four.

51
00:03:13,530 --> 00:03:14,130
Okay?

52
00:03:14,130 --> 00:03:16,595
So all possible paths have been listed,
okay?

53
00:03:17,712 --> 00:03:21,548
So this path 1, 2, 3, 4, for
example, is listed as 1, 4.

54
00:03:21,548 --> 00:03:23,486
You can also see it in a tabular manner.

55
00:03:23,486 --> 00:03:24,620
Okay.

56
00:03:24,620 --> 00:03:27,570
Now you probably realize that
the shortest pathway that we

57
00:03:27,570 --> 00:03:32,250
all used to on Google Maps and
on your smartphone nav applications.

58
00:03:32,250 --> 00:03:34,390
Are examples of Transitive Closure.

59
00:03:34,390 --> 00:03:34,940
Okay.
But

60
00:03:34,940 --> 00:03:38,310
in addition to shortest path there
are other Transitive Closure operations.

61
00:03:38,310 --> 00:03:41,550
For example if you're looking
at the electric network then you

62
00:03:41,550 --> 00:03:43,190
might see connectivity.

63
00:03:43,190 --> 00:03:45,750
Okay.
Will the current flow from point A to B,

64
00:03:45,750 --> 00:03:47,820
that's another example
of Transitive Closure.

65
00:03:47,820 --> 00:03:49,030
Okay.

66
00:03:49,030 --> 00:03:51,930
So why are we talking about
all this Transitive Closure?

67
00:03:51,930 --> 00:03:56,820
Okay, the reason is that if you remember
the spatial querying we learned so far.

68
00:03:56,820 --> 00:03:58,640
It was based on relational algebra.

69
00:03:58,640 --> 00:04:03,580
And there is a formal result, which
basically says that the Original SQL, and

70
00:04:03,580 --> 00:04:07,590
other relational algebra
based query languages.

71
00:04:07,590 --> 00:04:10,510
Are not able to compute
transitive closures.

72
00:04:10,510 --> 00:04:14,971
So in other words if you wanted to support
the shortest path using the spatial query

73
00:04:14,971 --> 00:04:19,128
language we learned so far with
operations like select, project and join.

74
00:04:19,128 --> 00:04:20,266
We were out of luck.

75
00:04:20,266 --> 00:04:20,920
Okay.

76
00:04:20,920 --> 00:04:23,110
Unless we knew the length of the path.

77
00:04:23,110 --> 00:04:26,050
If you know your path length
is limited to five or ten.

78
00:04:26,050 --> 00:04:28,840
You could use a sequence of those five or
ten joins.

79
00:04:28,840 --> 00:04:32,820
But if we don't know the path length a
priori, there is no way to do that, okay.

80
00:04:32,820 --> 00:04:33,580
In other words,

81
00:04:33,580 --> 00:04:38,470
we need to extend our query languages
to support transitive closure.

82
00:04:38,470 --> 00:04:43,540
So this discussion happened quite
a bit in late 80s and early 90s.

83
00:04:43,540 --> 00:04:45,840
And people looked at
many different choices.

84
00:04:45,840 --> 00:04:48,619
And here are the two basic
choices which are possible.

85
00:04:49,880 --> 00:04:54,980
So one mechanism to extend query
languages is via abstract data type.

86
00:04:54,980 --> 00:05:01,020
And this is how we extended basic SQL3 to
support spatial data types like points,

87
00:05:01,020 --> 00:05:02,810
lines, strings, polygons.

88
00:05:02,810 --> 00:05:04,420
And we spent a lot of time in, you know,

89
00:05:04,420 --> 00:05:07,545
in previous spatial query language
discussion to illustrate that.

90
00:05:07,545 --> 00:05:08,170
'Kay?

91
00:05:08,170 --> 00:05:12,650
Now the same mechanism can be
used to support spatial networks.

92
00:05:12,650 --> 00:05:18,550
If we can design a set of abstract data
types, then we could add it to SQL3.

93
00:05:18,550 --> 00:05:20,520
Okay?
What may these data types be?

94
00:05:20,520 --> 00:05:23,220
We'll come back and
see the details in next video.

95
00:05:23,220 --> 00:05:27,880
But you can imagine data types
like graphs, nodes, vertices, or

96
00:05:27,880 --> 00:05:29,620
maybe even paths.

97
00:05:29,620 --> 00:05:32,110
What kind of operations
we may want on those.

98
00:05:32,110 --> 00:05:35,490
Certainly shortest path will be one
of them, connectivity, and so on.

99
00:05:35,490 --> 00:05:38,803
Okay, so if we could design
these abstract data types,

100
00:05:38,803 --> 00:05:42,360
then SQL3 is capable of
incorporating those.

101
00:05:42,360 --> 00:05:48,030
And then you will be able to use the
existing select statement to query graphs.

102
00:05:48,030 --> 00:05:48,530
Okay.

103
00:05:49,770 --> 00:05:52,820
However, there's another way
to extend query languages and

104
00:05:52,820 --> 00:05:54,640
those are custom statements.

105
00:05:54,640 --> 00:05:57,170
And SQL has gone actually that way.

106
00:05:57,170 --> 00:06:02,280
So first the vendors were making
their own custom statements.

107
00:06:02,280 --> 00:06:04,520
So, for example in Oracle.

108
00:06:04,520 --> 00:06:08,720
You will find, Oracle SQL,
you will find a statement called CONNECT.

109
00:06:08,720 --> 00:06:13,420
And this was created for directed acyclic
graphs or hierarchies because many,

110
00:06:13,420 --> 00:06:17,500
many companies have trees, for
example to to present build of materials,

111
00:06:17,500 --> 00:06:22,270
you know, what ingredients do I need to
produce a particular food product, okay?

112
00:06:22,270 --> 00:06:25,680
And they often want a transitive
closure on these hierarchies.

113
00:06:25,680 --> 00:06:27,970
So Oracle added this statement, and

114
00:06:27,970 --> 00:06:31,110
it's little bit easier to implement
than general graph, okay?

115
00:06:31,110 --> 00:06:33,390
These are not going to help
you on shortest path and

116
00:06:33,390 --> 00:06:37,170
road networks,
because road networks have cycles, right?

117
00:06:37,170 --> 00:06:40,910
So a more general approach
was taken with SQL3

118
00:06:40,910 --> 00:06:43,610
to add another statement
called the WITH RECURSIVE.

119
00:06:43,610 --> 00:06:45,590
And that supports general graph and

120
00:06:45,590 --> 00:06:49,030
transitive closure such as
shortest path on general graphs.

121
00:06:50,230 --> 00:06:52,035
So when you come back in next video,

122
00:06:52,035 --> 00:06:54,510
we will look at the details
of these statements.

123
00:06:54,510 --> 00:06:56,105
And and then, go back and,

124
00:06:56,105 --> 00:07:00,770
see how to implement them efficiently in
the discussion of physical data models.

125
00:07:00,770 --> 00:07:04,973
So thank you for your attention, I hope
this video showed you the limitations of

126
00:07:04,973 --> 00:07:06,731
traditional query languages and

127
00:07:06,731 --> 00:07:11,840
motivated you to learn some new features
which can support spatial network queries.

128
00:07:11,840 --> 00:07:16,150
And look forward seeing you to discuss
the details of these in the next videos.

129
00:07:16,150 --> 00:07:16,819
Thank you.

130
00:07:16,819 --> 00:07:17,464
[SOUND]

