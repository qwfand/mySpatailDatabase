1
00:00:00,230 --> 00:00:03,290
Welcome back to the discussion
of spacial networks.

2
00:00:03,290 --> 00:00:07,520
In last four videos we looked
at the societal motivation.

3
00:00:07,520 --> 00:00:11,920
For example many of us use
navigation apps on our smartphones.

4
00:00:11,920 --> 00:00:15,540
Also via web services such as google maps.

5
00:00:15,540 --> 00:00:20,820
Underlining these applications we have
many spacial networks such as road maps,

6
00:00:20,820 --> 00:00:22,990
public transportation,
networks, and so on.

7
00:00:24,250 --> 00:00:29,200
We also looked at conceptual data
models called spatial networks.

8
00:00:29,200 --> 00:00:32,410
For example,
we looked at entity relationship diagram,

9
00:00:32,410 --> 00:00:34,980
which can represent
a rich set of concepts.

10
00:00:34,980 --> 00:00:40,760
For example, in road map one may
represent streets street intersections,

11
00:00:40,760 --> 00:00:44,600
turns, points of interest, and so on.

12
00:00:44,600 --> 00:00:48,400
Mathematically we use a simpler
model called graphs which

13
00:00:48,400 --> 00:00:53,890
essentially consists a set of vertices or
nodes and another set of edges.

14
00:00:53,890 --> 00:00:58,250
In case of road maps, the vertices
made project road into sections.

15
00:00:58,250 --> 00:01:01,810
And the edges made a project
road segment connecting those.

16
00:01:01,810 --> 00:01:02,920
Okay?

17
00:01:02,920 --> 00:01:06,940
Now next we started looking at
logical data models, primarily for

18
00:01:06,940 --> 00:01:08,960
creating road maps.

19
00:01:08,960 --> 00:01:13,340
And we discussed why, you know,
the SQL we have learned so

20
00:01:13,340 --> 00:01:17,950
far, the spatial equating we have
learned so far, is not adequate.

21
00:01:17,950 --> 00:01:24,090
Okay, formally, relational algebra cannot
represent so you need some new things.

22
00:01:24,090 --> 00:01:27,890
So in this video module we are going
to learn one extension to SQL

23
00:01:29,150 --> 00:01:31,240
to equate graphs.

24
00:01:31,240 --> 00:01:34,710
So at the end of this video
we should all be able to

25
00:01:34,710 --> 00:01:38,450
describe the connect clause in SQL Select.

26
00:01:38,450 --> 00:01:40,310
It's a render specific feature.

27
00:01:40,310 --> 00:01:43,050
Oracle was the one who
started this feature,

28
00:01:43,050 --> 00:01:45,230
then maybe other brand names
which may also have it.

29
00:01:46,960 --> 00:01:52,010
And using CONNECT we'll also learn how
the query a directed acyclic graph.

30
00:01:52,010 --> 00:01:53,070
Okay.

31
00:01:53,070 --> 00:01:55,170
So here is your, you know,
quick background.

32
00:01:55,170 --> 00:02:00,060
You remember for querying we learned that
our tradition SQL, which is based on

33
00:02:00,060 --> 00:02:05,560
relational algebra, is not capable
of computing transitive closure.

34
00:02:05,560 --> 00:02:09,068
In other words if I gave you
road segments connecting

35
00:02:09,068 --> 00:02:14,070
existing intersections we cannot
express shortest path query in old SQL.

36
00:02:15,190 --> 00:02:20,310
So we need to extend SQL to support
graph queries such as shortest path and

37
00:02:20,310 --> 00:02:22,560
there are two broad ways to do that.

38
00:02:22,560 --> 00:02:27,463
One could use abstract data type in
SQL 3 very much like the data type,

39
00:02:27,463 --> 00:02:31,800
points, polygons et cetera,
we use for spatial equating.

40
00:02:31,800 --> 00:02:35,880
One could define graphs and
paths, vertices, edges, and so.

41
00:02:35,880 --> 00:02:36,890
Okay.

42
00:02:36,890 --> 00:02:42,430
The other approach is to add
custom statements in SQL and

43
00:02:42,430 --> 00:02:44,225
we will start from there first.

44
00:02:44,225 --> 00:02:44,760
Okay.

45
00:02:44,760 --> 00:02:48,200
So there at least two different
ways people have done it.

46
00:02:48,200 --> 00:02:52,860
We'll look at the original, you know,
CONNECT by you know, CONNECT clause in

47
00:02:52,860 --> 00:02:57,110
SELECT statement that was popularized by
Oracle and then, in the subsequent video,

48
00:02:57,110 --> 00:03:01,640
we will come back and look at recursion,
which is standardized with SQL 3.

49
00:03:01,640 --> 00:03:02,880
Okay?

50
00:03:02,880 --> 00:03:08,650
So, without further ado,
let's look at the CONNECT BY facility, and

51
00:03:08,650 --> 00:03:11,610
in this slide we are going to
look at the input and output.

52
00:03:11,610 --> 00:03:15,490
And as you recall, you know,
the goal is to compute transitive closure.

53
00:03:15,490 --> 00:03:21,250
So import is a graph more specifically
a directed acyclic graph.

54
00:03:21,250 --> 00:03:25,870
So for example, here we are showing you
the river network represented as a graph,

55
00:03:25,870 --> 00:03:28,870
where the nodes are rivers,
such as here you see Missouri,

56
00:03:28,870 --> 00:03:34,530
Mississippi, and the edges, or
directed edges, represent falls into.

57
00:03:34,530 --> 00:03:38,080
So Missouri falls into Mississippi and
that's this edge.

58
00:03:38,080 --> 00:03:39,150
Okay.

59
00:03:39,150 --> 00:03:43,730
Given such a graph,
the connect by statement can,

60
00:03:43,730 --> 00:03:46,700
you know compute transitive closure.

61
00:03:46,700 --> 00:03:50,910
In addition, it can actually give
you a sub-set of transitive closure.

62
00:03:50,910 --> 00:03:53,650
So for example,
you can specify a start node.

63
00:03:53,650 --> 00:03:56,360
Let's say we started with Missouri.

64
00:03:56,360 --> 00:03:58,130
Then we can do two kinds of queries.

65
00:03:58,130 --> 00:04:01,893
Either predecessors of Missouri or
successors of Missouri.

66
00:04:01,893 --> 00:04:02,510
Okay.

67
00:04:02,510 --> 00:04:08,010
So in order to separate those you need
to also specify travel direction.

68
00:04:08,010 --> 00:04:08,640
Okay.

69
00:04:08,640 --> 00:04:12,700
So essentially if you wanted to compute
predecessor, then, you know, you will

70
00:04:12,700 --> 00:04:17,540
get all these rivers which directly or
indirectly contribute water to Missouri.

71
00:04:17,540 --> 00:04:18,260
And in this case,

72
00:04:18,260 --> 00:04:22,090
you're travel direction is in some
sense is opposite of these arrows.

73
00:04:22,090 --> 00:04:23,460
Okay?

74
00:04:23,460 --> 00:04:26,310
The other option is to find
Successors of Missouri,

75
00:04:26,310 --> 00:04:30,570
in which case we are following the arrows
as their projected in their diagram and

76
00:04:30,570 --> 00:04:34,480
in this case you might find
Mississippi as a successor.

77
00:04:34,480 --> 00:04:37,360
Missouri contributes water to that river.

78
00:04:37,360 --> 00:04:41,480
Let's next look at
the tabular representation.

79
00:04:41,480 --> 00:04:45,680
Because in SQL all the data has
to be represented as tables.

80
00:04:45,680 --> 00:04:50,665
So one way to represent graphs in terms of
tables is to simply list the edges, okay.

81
00:04:50,665 --> 00:04:51,220
Okay?
So

82
00:04:51,220 --> 00:04:55,670
here is an edge table for
this river falls into another river graph.

83
00:04:55,670 --> 00:04:58,900
And in this case we may
just need two columns.

84
00:04:58,900 --> 00:05:01,800
Because each edge has its, you know,
it starts from its source and

85
00:05:01,800 --> 00:05:03,520
it ends up at the destination.

86
00:05:03,520 --> 00:05:07,850
So for example, if you're looking at
the edge, Missouri falls into Mississippi.

87
00:05:07,850 --> 00:05:14,710
We may specify as a row, where Source is
Missouri, and Destination is Mississippi.

88
00:05:14,710 --> 00:05:17,520
Now, if I look at the other way around,
you know Platte and

89
00:05:17,520 --> 00:05:20,240
Yellowstone, they fall into Missouri.

90
00:05:20,240 --> 00:05:22,390
In this course Missouri may
be their destination, and

91
00:05:22,390 --> 00:05:24,010
those rivers may be their source.

92
00:05:24,010 --> 00:05:24,670
Okay?

93
00:05:24,670 --> 00:05:26,800
So if I actually created one row for

94
00:05:26,800 --> 00:05:32,670
each of these edges, then you are going to
get two more rows, like this Ohio etc.,

95
00:05:32,670 --> 00:05:33,900
falling into Mississippi.

96
00:05:33,900 --> 00:05:38,520
They are here, and remaining, you know,
contributories to Missouri are here.

97
00:05:39,990 --> 00:05:43,540
So once you have this tabular
representation we can work with SQL or

98
00:05:44,650 --> 00:05:48,695
and we can look at the,
the syntax of this statement.

99
00:05:48,695 --> 00:05:49,320
Okay?
So

100
00:05:49,320 --> 00:05:52,780
here is a very simple
example of CONNECT BY.

101
00:05:52,780 --> 00:05:53,690
'Kay?

102
00:05:53,690 --> 00:05:58,820
So in this particular SELECT statement,
you would recall some familiar things.

103
00:05:58,820 --> 00:06:02,640
So for example, you know,
there is a SELECT clause and a FROM cause.

104
00:06:02,640 --> 00:06:06,400
These two we saw before when we
were studying spatial equating.

105
00:06:06,400 --> 00:06:11,530
And you will remember that the FROM
clause specifies the table, okay.

106
00:06:11,530 --> 00:06:15,046
So in our case let's say we are working
with this table Falls_Into to

107
00:06:15,046 --> 00:06:16,870
representing our graph.

108
00:06:16,870 --> 00:06:19,350
That table may named in the FROM clause.

109
00:06:19,350 --> 00:06:23,165
Very much like the other SQL statements
we saw where we were listing tables.

110
00:06:23,165 --> 00:06:23,665
'Kay?

111
00:06:24,820 --> 00:06:27,580
Then we have two new clauses,
this CONNECT BY and

112
00:06:27,580 --> 00:06:30,620
START WITH, and
let's try to understand what they do.

113
00:06:30,620 --> 00:06:32,960
START WITH is a much simpler clause.

114
00:06:32,960 --> 00:06:33,710
And in this case,

115
00:06:33,710 --> 00:06:38,280
you notice it specifies a column in
our table, so destination column.

116
00:06:38,280 --> 00:06:40,130
And it also provides a condition.

117
00:06:40,130 --> 00:06:41,720
So it's saying that, you know,

118
00:06:41,720 --> 00:06:45,160
you should start with the rows in this
table, where the destination is Missouri.

119
00:06:45,160 --> 00:06:48,370
So these two rows are the starting point.

120
00:06:48,370 --> 00:06:49,620
And starting with these rows,

121
00:06:49,620 --> 00:06:53,550
we could either try to find predecessors
of Missouri or successors of Missouri.

122
00:06:53,550 --> 00:06:54,860
Okay?

123
00:06:54,860 --> 00:06:58,760
So now a natural question is,
what does connect by prior clause do?

124
00:06:58,760 --> 00:07:03,150
And you can probably guess,
it is specifying the direction of travel.

125
00:07:03,150 --> 00:07:06,930
Starting with Missouri, do you want
the successors, or predecessor?

126
00:07:06,930 --> 00:07:07,700
Okay?

127
00:07:07,700 --> 00:07:08,950
So in other words, you know,

128
00:07:08,950 --> 00:07:13,330
if you think about this red arrow, if you
want to go from destination to source.

129
00:07:13,330 --> 00:07:15,330
In other words, getting predecessor.

130
00:07:15,330 --> 00:07:19,450
You know, which reverse
contribute water to Missouri.

131
00:07:19,450 --> 00:07:23,890
Then you could specify this and
as it is shown in this statement.

132
00:07:23,890 --> 00:07:27,050
So in fact,
this prior is placed before source, so

133
00:07:27,050 --> 00:07:30,910
it basically says you are going
from destination to source, okay?

134
00:07:30,910 --> 00:07:36,110
We could move this keyword prior to
other side after the equal sign and that

135
00:07:36,110 --> 00:07:40,090
will give you the other direction where
you're going from source to destination.

136
00:07:40,090 --> 00:07:42,540
And then sometimes this ad was
going the other way, okay.

137
00:07:44,040 --> 00:07:47,100
So so let's look at both side by side.

138
00:07:47,100 --> 00:07:50,500
If you are going from destination
to source, or, you know,

139
00:07:50,500 --> 00:07:52,910
this should be source to destination,
slight typo.

140
00:07:54,120 --> 00:07:58,950
The so, contributing reverts to Missouri,
in this case,

141
00:07:58,950 --> 00:08:02,540
so now that you might see as
the query we just saw, okay.

142
00:08:02,540 --> 00:08:05,920
So this query is going to
start with Missouri and

143
00:08:05,920 --> 00:08:09,470
get to the rivers which directly
contribute to Missouri, and

144
00:08:09,470 --> 00:08:13,860
it will continue on and say any river that
contributes to these rivers, Platte or

145
00:08:13,860 --> 00:08:17,565
Yellowstone, are also contributing
to Missouri main directory.

146
00:08:17,565 --> 00:08:18,870
Okay.

147
00:08:18,870 --> 00:08:22,810
The second choice is to
ask the successors of

148
00:08:22,810 --> 00:08:25,900
Missouri which rivers
get water from Missouri.

149
00:08:25,900 --> 00:08:27,270
So if there were, let's say,

150
00:08:27,270 --> 00:08:31,880
a spill of some toxic material
in Mississippi in Missouri.

151
00:08:31,880 --> 00:08:35,500
And you want to ask which of
the rivers should be observed or

152
00:08:35,500 --> 00:08:39,220
monitored for that material,
then you will go the other direction.

153
00:08:39,220 --> 00:08:43,450
And notice here the prior keyword
has been moved past the equal sign.

154
00:08:43,450 --> 00:08:44,150
Okay?

155
00:08:44,150 --> 00:08:46,680
So here the direction is
from source to destination,

156
00:08:46,680 --> 00:08:50,290
this is a typo, but this is the other
direction as shown in the figure.

157
00:08:50,290 --> 00:08:50,790
Okay?

158
00:08:51,920 --> 00:08:55,210
So next let's look at the semantics.

159
00:08:55,210 --> 00:08:56,120
Okay.

160
00:08:56,120 --> 00:08:58,260
As you know SQL is a declarative language.

161
00:08:58,260 --> 00:09:02,290
It doesn't specify any algorithms
to compute the result.

162
00:09:02,290 --> 00:09:07,370
But we can at least create a mock up
algorithm which is for hand simulation so

163
00:09:07,370 --> 00:09:12,580
that you can understand the meaning of
a given statement with connect by clause.

164
00:09:12,580 --> 00:09:13,160
Okay?

165
00:09:13,160 --> 00:09:17,050
So let's suppose we go back to this
statement which we have seen before.

166
00:09:17,050 --> 00:09:20,340
Where, you know, you are looking
back at this table FallsInto and

167
00:09:20,340 --> 00:09:23,280
then you want to travel it
in a certain direction.

168
00:09:23,280 --> 00:09:25,550
And then get either places,
several successors.

169
00:09:25,550 --> 00:09:26,760
Okay?

170
00:09:26,760 --> 00:09:28,690
So in order to execute it.

171
00:09:28,690 --> 00:09:32,840
The first step, usually,
is to work with this initialization.

172
00:09:32,840 --> 00:09:36,070
This START WITH clause is executed first.

173
00:09:36,070 --> 00:09:38,580
So in this case, you know,
if you look at the query,

174
00:09:38,580 --> 00:09:44,040
you know, the condition destination equal
to Missouri, that will qualify two rows,

175
00:09:44,040 --> 00:09:47,290
which are surrounded by blue box here,
okay.

176
00:09:47,290 --> 00:09:51,115
So we'll initialize the result
with just these two rows.

177
00:09:51,115 --> 00:09:53,370
Okay, so this is your result or

178
00:09:53,370 --> 00:09:56,165
you can call it the prior result
because it's going to grow.

179
00:09:56,165 --> 00:09:57,320
Okay?

180
00:09:57,320 --> 00:10:00,690
So if the first steps we get
two rows where destination is

181
00:10:00,690 --> 00:10:04,710
Missouri as specified by
this start with clause.

182
00:10:04,710 --> 00:10:05,290
Okay.

183
00:10:05,290 --> 00:10:08,400
Once we have done that then
we can grow the result.

184
00:10:08,400 --> 00:10:12,020
And at that point,
this connect by clause comes in handy.

185
00:10:12,020 --> 00:10:16,520
So, in the next step, we basically
look at this connect by clause, and

186
00:10:16,520 --> 00:10:19,550
this condition, and
we try to grow the desert.

187
00:10:19,550 --> 00:10:24,880
So, more formally, what you can do
is to think of this prior, you know,

188
00:10:24,880 --> 00:10:29,700
dot source equal to the original
table FallsInto.destination as

189
00:10:29,700 --> 00:10:30,975
a joint condition.

190
00:10:30,975 --> 00:10:31,600
'Kay.

191
00:10:31,600 --> 00:10:35,603
So in other words, you know, you can
take a look at the prior source, okay.

192
00:10:35,603 --> 00:10:41,030
In our results so far there are two
sources, Platte and Yellowstone.

193
00:10:41,030 --> 00:10:43,550
And now we go back to our
original table FallsInto and

194
00:10:43,550 --> 00:10:46,390
say what do they match on
their destination side.

195
00:10:46,390 --> 00:10:47,780
Okay.

196
00:10:47,780 --> 00:10:49,040
As specified here.

197
00:10:50,860 --> 00:10:55,590
So in this case as you can see it will
match four rows in original table.

198
00:10:55,590 --> 00:11:00,470
And then all of these four rows will come
and become part of your result, okay.

199
00:11:00,470 --> 00:11:04,970
So all of this will get added and now
your result has the original two rows and

200
00:11:04,970 --> 00:11:07,670
four new rows, six rows, okay.

201
00:11:07,670 --> 00:11:10,440
Now step two can be repeated again.

202
00:11:10,440 --> 00:11:11,150
All right.

203
00:11:11,150 --> 00:11:14,360
So now we can again try to say,
well if I took, you know,

204
00:11:14,360 --> 00:11:17,070
all these sources, P1, P2, et cetera, and

205
00:11:17,070 --> 00:11:20,980
try to match it with destination,
will I get more things in the result.

206
00:11:20,980 --> 00:11:24,550
And in this case, as you realize we
are not going to add any more because we

207
00:11:24,550 --> 00:11:27,390
don't have any predecessors
of these new reverse, P1,

208
00:11:27,390 --> 00:11:29,500
P2, et cetera which has been added, okay?

209
00:11:29,500 --> 00:11:31,160
So we will terminate.

210
00:11:31,160 --> 00:11:34,700
And at this point we have
all the rows of interest.

211
00:11:34,700 --> 00:11:38,190
And then finally the select
clause is going to be executed,

212
00:11:38,190 --> 00:11:43,770
which will only take the first column,
the source column, to form the result.

213
00:11:43,770 --> 00:11:45,480
And that's where you get the result.

214
00:11:45,480 --> 00:11:45,980
Okay?

215
00:11:47,140 --> 00:11:52,400
So to summarize you know,
we looked at connect clause which has been

216
00:11:52,400 --> 00:11:57,049
added to select statement by some vendors
like Oracle to support graph queries.

217
00:11:57,049 --> 00:12:02,300
This particular statement allows you
to work with a directed acyclic graph.

218
00:12:02,300 --> 00:12:04,035
So, if you have something hierarchical or

219
00:12:04,035 --> 00:12:07,880
tree-like, then you can travel it,
either travel it up the tree or

220
00:12:07,880 --> 00:12:12,360
down the tree to compute predecessors
of successors of the node.

221
00:12:12,360 --> 00:12:15,277
We also showed you an example
with river network to

222
00:12:15,277 --> 00:12:17,600
explain the syntax and semantics.

223
00:12:17,600 --> 00:12:19,204
In the next video we'll come back and

224
00:12:19,204 --> 00:12:21,442
look at another statement
called with recursive.

225
00:12:21,442 --> 00:12:23,605
Which is more standardized in SQL3 and

226
00:12:23,605 --> 00:12:27,910
may be available across many,
many brand names and, and vendors.

227
00:12:27,910 --> 00:12:32,340
And that will give you a more general
statement to work with graphs.

228
00:12:32,340 --> 00:12:34,655
So look, look forward to
seeing you in the next video.

